debug_mode = False
CURRENT_VERSION = """
2.6.2
"""
CURRENT_VERSION=CURRENT_VERSION.replace('\n','')



import os,sys,random,requests



def get_latest_version_info():
    try:
        response = requests.get(VERSION_CHECK_URL)
        response.raise_for_status()
        return response.json()
    except requests.RequestError as e:
        print(f"Error checking for updates: {e}")
        return None

def download_new_version(download_url, filename):
    try:
        response = requests.get(download_url)
        response.raise_for_status()
        
        directory = os.path.dirname(filename)
        if directory and not os.path.exists(directory):
            os.makedirs(directory)
            
        with open(filename, 'wb') as file:
            file.write(response.content)
    except Exception as e:
        print(f"Error saat mengunduh: {e}")
        


try:
    from colorama import init, Fore, Back, Style
    init()
    def color(text, fore=None, back=None):
        color_map = {
            (255,0,0): Fore.RED,
            (0,255,0): Fore.GREEN, 
            (0,0,255): Fore.BLUE,
            (255,255,0): Fore.YELLOW,
            (0,255,255): Fore.CYAN,
            (255,0,255): Fore.MAGENTA
        }
        result = ""
        if fore in color_map:
            result += color_map[fore]
        result += text
        result += Style.RESET_ALL
        return result

    from pystyle import Anime as pyAnime
    from pystyle import Colors as pyColors
    from pystyle import Colorate as pyColorate
    from pystyle import Center as pyCenter
    from pystyle import System as pySystem
    local_ip = requests.get('https://api.ipify.org').text
    response = requests.get(f"https://ipinfo.io/{local_ip}/json")
    data_jaringan = response.json()
except Exception as e:
    os.system("pip install colorama")
    os.system("pip install requests")
    os.system("pip install pystyle")
    
    from colorama import init, Fore, Back, Style
    init()
    def color(text, fore=None, back=None):
        color_map = {
            (255,0,0): Fore.RED,
            (0,255,0): Fore.GREEN, 
            (0,0,255): Fore.BLUE,
            (255,255,0): Fore.YELLOW,
            (0,255,255): Fore.CYAN,
            (255,0,255): Fore.MAGENTA
        }
        result = ""
        if fore in color_map:
            result += color_map[fore]
        result += text
        result += Style.RESET_ALL
        return result

    from pystyle import Anime as pyAnime
    from pystyle import Colors as pyColors
    from pystyle import Colorate as pyColorate
    from pystyle import Center as pyCenter
    from pystyle import System as pySystem
    
#text = """
#< [ Telegram PONSOBOY_02 ] > X < [ TikTok PONSOBOY_02 ] >"""[1:]


banner = r"""



‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚†∂‚†∂‚†ö‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†∑‚†∂‚¢¶‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚†û‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†ª‚¢∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚°§‚†§‚†§‚¢§‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚†è‚†Ä‚¢Ä‚£Ä‚£†‚£∂‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚£†‚†¥‚†Ä‚¢Ä‚†î‚†ã‚¢Å‚†é‚†Ä‚°á‚†ò‚°Ñ‚†â‚†≤‚£ç‚†ë‚†¢‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚£¶‚£§‚°Ä‚†Ä‚†ô‚£∑‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚£æ‚†É‚†Ä‚£¥‚†è‚£º‚°ø‚££‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚††‚¢Ñ‚°¥‚†É‚†Ä‚†Ä‚°û‚†Ä‚†Ä‚†É‚†Ä‚†π‚°Ñ‚†Ä‚†à‚¢≥‚°Ä‚†§‚†ò‚†¢‚°Ä‚†Ä‚†Ä‚¢æ‚¢ª‚£∑‚°ò‚£¶‚°Ä‚†à‚¢ø‚°Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚£æ‚†Å‚£†‚¢∫‚£ø‚¢ò‚£≠‚£æ‚†É‚†Ä‚°∞‚†ã‚†Ä‚†Ä‚¢Ä‚°ú‚†Å‚†Å‚†Ä‚¢∫‚†Ä‚£¥‚£û‚°≥‚£∂‚°Ñ‚†Å‚†Ä‚†â‚†Ä‚†±‚°Ñ‚†Ä‚†Ä‚†à‚†¢‚°Ä‚†à‚¢∑‚£¨‚°ì‚¢ª‚£∑‚¢¶‚†à‚¢ø‚°Ñ‚†Ä
‚†Ä‚£º‚†É‚¢∞‚°á‚¢∏‚£∑‚°ø‚¢ª‚†Å‚¢Ä‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†à‚†Å‚£∑‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚°Ä‚†Ä‚†Ä‚†Ä‚†±‚°Ñ‚†Ä‚¢ø‚¢ø‚£æ‚°ø‚¢∏‚£ß‚†à‚£∑‚†Ä
‚¢†‚°ü‚†Ä‚£æ‚£ø‚¢∏‚£´‚£∂‚†á‚†Ä‚°û‚†Ä‚†Ä‚†í‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†É‚††‚†Ä‚†Ä‚†Ä‚¢π‚°Ä‚†ò‚£∑‚£å‚†ß‚¢∏‚£ø‚†Ä‚¢∏‚°á
‚£º‚°á‚£∞‚¢ª‚£ø‚£∏‚°ø‚†ã‚†Ä‚¢∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ª‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ß‚†Ä‚¢∏‚£ø‚£ß‚£º‚°ø‚¢Ä‚†Ä‚£∑
‚£ø‚†Ä‚£ø‚°Ä‚¢ø‚°ü‚¢°‚°á‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ñ‚†∏‚£Ü‚†ª‚£ø‚†É‚£º‚†Ä‚¢ø
‚£ø‚†Ä‚¢ø‚£∑‚†ò‚¢∞‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚°ü‚†Ä‚£π‚£Ø‚°Å‚¢∏‚£∑‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Å‚†Ä‚¢ø‚£¶‚†ô‚£º‚£ø‚†Ä‚¢∏
‚£ø‚†Ä‚†ò‚£ø‚£á‚£ø‚°è‚°Ñ‚†Ä‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚¢∞‚£á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚¢Ä‚†∏‚£ø‚¢∞‚£ø‚†á‚†Ä‚£æ
‚¢ª‚°á‚£∑‚°à‚¢ª‚£ø‚¢Ä‚£ø‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†Ä‚£º‚°Ü‚¢ø‚°ø‚†É‚£º‚†Ä‚£ø
‚†ò‚£ß‚†ò‚£ø‚£¶‚°ô‚¢∏‚£ø‚£¶‚°Ä‚¢£‚†Ä‚°†‚†§‚†í‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚¢∏‚£ø‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†í‚†¢‚†§‚£Ä‚£∞‚†Å‚°∞‚£ø‚°á‚¢ö‚£¥‚£æ‚†è‚¢∏‚°á
‚†Ä‚¢ª‚°Ñ‚¢à‚†ª‚£ø‚£º‚£ø‚°á‚£∑‚°à‚¢¶‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚°∞‚¢É‚£º‚†Å‚£ø‚£ß‚£æ‚°ø‚°É‚¢Ä‚°ø‚†Ä
‚†Ä‚†à‚¢ø‚°Ä‚¢∑‚£å‚†õ‚¢ø‚£ß‚¢∏‚£∑‚°Ä‚†ë‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†ú‚†Å‚£º‚°ü‚¢∏‚°ø‚†ü‚£â‚°¥‚†É‚£º‚†É‚†Ä
‚†Ä‚†Ä‚†à‚¢ø‚°Ñ‚†ª‚¢ø‚£∂‚£¨‚£Å‚¢ø‚£ß‚¢≥‚£Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£†‚°ñ‚£π‚£ø‚¢É‚£•‚£¥‚£æ‚†ü‚¢Å‚£º‚†É‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£Ü‚†Ä‚¢ù‚†ª‚†ø‚¢ø‚£ø‚£¶‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£∞‚£ø‚°ø‚†ø‚†ü‚£ã‚†Å‚¢†‚°æ‚†É‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∑‚°Ä‚†ô‚†∂‚£∂‚£§‚£§‚£•‚£¨‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£º‚£•‚£§‚£∂‚°∂‚†õ‚¢Å‚£¥‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚¢¶‚£Ä‚†Ä‚¢≠‚£â‚£ô‚£â‚£â‚£Å‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£å‚£â‚£â‚£ã‚£â‚°©‚†Å‚¢Ä‚£¥‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†∑‚£§‚°à‚†ô‚†õ‚†ª‚†õ‚†õ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†õ‚†õ‚†õ‚†õ‚¢â‚£†‚°∂‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∑‚£¶‚£Ñ‚£Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢Ä‚£Ä‚£§‚†∂‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†õ‚†ª‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä


‚†Ä‚†Ä
                   ‚ñà‚ñë‚ñà ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà
                   ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñë‚ñà ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÑ
                       
                   ùô≤ùô∞ùöÅ ùôøùô∞ùöÅùô∫ùô∏ùôΩùô∂ ùôºùöÑùôªùöÉùô∏ùôøùôªùô∞ùöàùô¥ùöÅ
                         ùôøùöÅùô¥ùöÇùöÇ ùô¥ùôΩùöÉùô¥ùöÅ                                 
"""[1:]


pyAnime.Fade(pyCenter.Center(banner), pyColors.red_to_yellow, pyColorate.Vertical, enter=True)


#pyAnime.Fade(pyCenter.Center(text), pyColors.purple_to_red, pyColorate.Vertical, enter=True)
#print(pyColorate.Horizontal(pyColors.red_to_yellow, pyCenter.XCenter(text)))

pySystem.Clear()

#print("\n"*2    )
#print(pyColorate.Horizontal(pyColors.red_to_yellow, pyCenter.XCenter(text)))
#print("\n"*2)




from pystyle import Box
import random
import requests
from time import sleep
import os, signal, sys
from rich.console import Console
from rich.prompt import Prompt, IntPrompt
from rich.text import Text
from rich.style import Style
import pystyle
from pystyle import Colors, Colorate
from pystyle import Center
import datetime



from PONSOBOY_02 import PONSOBOY_02

__CHANNEL_USERNAME__ = "PONSOBOY_02"
__GROUP_USERNAME__   = "PONSOBOY_02"

def signal_handler(sig, frame):
    print("\n Bye Bye...")
    sys.exit(0)

def gradient_text(text, colors):
    lines = text.splitlines()
    height = len(lines)
    width = max(len(line) for line in lines)
    colorful_text = Text()
    for y, line in enumerate(lines):
        for x, char in enumerate(line):
            if char != ' ':
                color_index = int(((x / (width - 1 if width > 1 else 1)) + (y / (height - 1 if height > 1 else 1))) * 0.5 * (len(colors) - 1))
                color_index = min(max(color_index, 0), len(colors) - 1)
                style = Style(color=colors[color_index])
                colorful_text.append(char, style=style)
            else:
                colorful_text.append(char)
        colorful_text.append("\n")
    return colorful_text

def banner(console):
    os.system('cls' if os.name == 'nt' else 'clear')
    brand_name =  "                ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà     ‚ñà‚ñë ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà \n"
    brand_name += "                ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà \n"
    brand_name += "                ‚ñí‚ñì‚ñà    ‚ñÑ ‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí\n"
    brand_name += "                ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñë‚ñà‚ñë ‚ñà ‚ñë‚ñà ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí\n"
    brand_name += "                ‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì  ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë\n"
    brand_name += "                ‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñì‚ñë‚ñí ‚ñí   ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë   ‚ñí ‚ñí \n"
    colors = [
        "rgb(255,0,0)", "rgb(255,69,0)", "rgb(255,140,0)", "rgb(255,215,0)", "rgb(173,255,47)", 
        "rgb(0,255,0)", "rgb(0,255,255)", "rgb(0,191,255)", "rgb(0,0,255)", "rgb(139,0,255)",
        "rgb(255,0,255)"
    ]
    colorful_text = gradient_text(brand_name, colors)
    console.print(colorful_text)
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter( '‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚òÜ‚òÜ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ')))
    
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter("ùêèùêãùêÑùêÄùêíùêÑ ùêãùêéùêÜùêéùêîùêì ùêÖùêëùêéùêå ùêÇùêèùêå ùêÅùêÑùêÖùêéùêëùêÑ ùêîùêíùêàùêçùêÜ ùêìùêáùêàùêí ùêìùêéùêéùêã")))
    
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter("ùêíùêáùêÄùêëùêàùêçùêÜ ùêìùêáùêÑ ùêÄùêÇùêÇùêÑùêíùêí ùêäùêÑùêò ùêàùêí ùêçùêéùêì ùêÄùêãùêãùêéùêñùêÑùêÉ ùêÄùêçùêÉ ùêñùêàùêãùêã ùêÅùêÑ ùêÅùêãùêéùêÇùêäùêÑùêÉ")))
    
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(f" ùêìùêûùê•ùêûùê†ùê´ùêöùê¶: @{__CHANNEL_USERNAME__} ùêéùê´ @{__GROUP_USERNAME__}")))
    
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter('‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[ ùñØùñ´ùñ†ùñ∏ùñ§ùñ± ùñ£ùñ§ùñ≥ùñ†ùñ®ùñ´ùñ≤ ]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ')))

def load_player_data(cpm):
    response = cpm.get_player_data()
    if response.get('ok'):
        data = response.get('data')
        if 'floats' in data and 'localID' in data and 'money' in data and 'coin' in data:
        
            
            print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(f'Name: {(data.get("Name") if "Name" in data else "UNDEFINED")} <> LocalID: {data.get("localID")} <> Money: {data.get("money")} <> Coins: {data.get("coin")}')))
                
            
        else:
            print(Colorate.Horizontal(Colors.rainbow, '! ERROR: new accounts most be signed-in to the game at least once !.'))
            exit(1)
    else:
        print(Colorate.Horizontal(Colors.rainbow, '! ERROR: seems like your login is not properly set !.'))
        exit(1)


def load_key_data(cpm):

    data = cpm.get_key_data()
    
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter('‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[ ùñ†ùñ¢ùñ¢ùñ§ùñ≤ùñ≤ ùñ™ùñ§ùñ∏ ùñ£ùñ§ùñ≥ùñ†ùñ®ùñ´ùñ≤ ]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ')))
    
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(f'Access Key: {data.get("access_key")} <> Telegram ID: {data.get("telegram_id")} <> Balance: {(data.get("coins") if not data.get("is_unlimited") else "Unlimited")}')))
    
        
    

def prompt_valid_value(content, tag, password=False):
    while True:
        value = Prompt.ask(content, password=password)
        if not value or value.isspace():
            print(Colorate.Horizontal(Colors.rainbow, f'{tag} CANNOT BE EMPTY OR JUST SPACES, PLEASE TRY AGAIN'))
        else:
            return value
            
def load_client_details():
    response = requests.get("http://ip-api.com/json")
    data = response.json()
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter('‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[ ùñ´ùñÆùñ¢ùñ†ùñ≥ùñ®ùñÆùñ≠ ]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ')))
    print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(f'Country: {data.get("country")} <> Region: {data.get("regionName")} <> City: {data.get("city")}')))

def interpolate_color(start_color, end_color, fraction):
    start_rgb = tuple(int(start_color[i:i+2], 16) for i in (1, 3, 5))
    end_rgb = tuple(int(end_color[i:i+2], 16) for i in (1, 3, 5))
    interpolated_rgb = tuple(int(start + fraction * (end - start)) for start, end in zip(start_rgb, end_rgb))
    return "{:02x}{:02x}{:02x}".format(*interpolated_rgb)

def rainbow_gradient_string(customer_name):
    modified_string = ""
    num_chars = len(customer_name)
    start_color = "{:06x}".format(random.randint(0, 0xFFFFFF))
    end_color = "{:06x}".format(random.randint(0, 0xFFFFFF))
    for i, char in enumerate(customer_name):
        fraction = i / max(num_chars - 1, 1)
        interpolated_color = interpolate_color(start_color, end_color, fraction)
        modified_string += f'[{interpolated_color}]{char}'
    return modified_string


if __name__ == "__main__":
    console = Console()
    signal.signal(signal.SIGINT, signal_handler)
    while True:
        banner(console)
        acc_email = prompt_valid_value("[?] ACCOUNT EMAIL", "Email", password=False)
        acc_password = prompt_valid_value("[?] ACCOUNT PASSWORD", "Password", password=False)
        acc_access_key = prompt_valid_value("[?] ACCESS KEY", "Access Key", password=False)
        console.print("[%] TRYING TO LOGIN: ", end=None)
        cpm = CPMEwan1999(acc_access_key)
        login_response = cpm.login(acc_email, acc_password)
        if login_response != 0:
            if login_response == 100:
                print(Colorate.Horizontal(Colors.rainbow, 'ACCOUNT NOT FOUND'))
                sleep(2)
                continue
            elif login_response == 101:
                print(Colorate.Horizontal(Colors.rainbow, 'WRONG PASSWORD'))
                sleep(2)
                continue
            elif login_response == 103:
                print(Colorate.Horizontal(Colors.rainbow, 'INVALID ACCESS KEY'))
                sleep(2)
                continue
            else:
                print(Colorate.Horizontal(Colors.rainbow, 'TRY AGAIN'))
                print(Colorate.Horizontal(Colors.rainbow, '! NOTE: MAKE SURE YOU FILLED OUT THE FIELDS'))
                sleep(2)
                continue
        else:
            print(Colorate.Horizontal(Colors.rainbow, 'SUCCESSFUL'))
            sleep(2)
        while True:
            banner(console)
            load_player_data(cpm)
            load_key_data(cpm)
            load_client_details()
            choices = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"]
            print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(Box.DoubleCube( '                             ùëäùê∏ùêøùê∂ùëÇùëÄùê∏ ùëáùëÇ ùëàùëÜùê∏ ùëÄùëå ùëáùëÇùëÇùêø\n\n             ùëÅùëÇùëáùê∏: ùëáùêªùê∏ ùëàùëÅùêøùêºùëÄùêºùëáùê∏ùê∑ ùêµùê¥ùêøùê¥ùëÅùê∂ùê∏ ùëÇùëÅùêøùëå ùëäùëÇùëÖùêæùëÜ ùêπùëÇùëÖ ùëÇùëÅùê∏ ùëÄùëÇùëÅùëáùêª\n\n\n01: Unlock Paid Cars           [3.500K] & 02: Increase Money          [1.000K]\n\n\n03: Unlock Coin Cars           [3.000K] & 04: Increase Coins          [3.000K]\n\n\n05: Unlock All Cars            [4.000K] & 06: King Rank               [3.500K]\n\n\n07: Unlock all Cars Siren      [3.500K] & 08: Change ID               [2.500K]\n\n\n09: Unlock w16 Engine          [3.000K] & 10: Change Name             [1..00K]\n\n\n11: Unlock All Horns           [3.000K] & 12: Change Name (Rainbow)   [1..00K]\n\n\n13: Unlock Disable Damage      [2.000K] & 14: Number Plates           [2.000K]\n\n\n15: Unlock Unlimited Fuel      [2.000K] & 16: Account Delete          [F.REE.]\n\n\n17: Unlock All Wheels          [2.500K] & 18: Account Register        [F.REE.]\n\n\n19: Unlock House 3             [2.500K] & 20: Delete Friends          [5..00K]\n\n\n21: Unlock Smoke               [2.000K] & 22: Change Race Wins        [7..00K]\n\n\n23: Change Race Loses          [7..00K] & 24: Custom Engine           [4.000K]\n\n\n25: remove car bumper (Car_ID) [2.000K] & 26: Speed Car Hack (Car_ID) [1.500K]\n\n\n27: Speed All Cars Hack        [2.500K] & 28: Chrome All Cars         [3.500K]\n\n\n29: All Cars Max Milage        [2.000K] & 30: Clone Account           [5.000K]\n\n\n    ùëàùëÅùêøùêºùëÄùêºùëáùê∏ùê∑ ùêµùê¥ùêøùê¥ùëÅùê∂ùê∏ ùêπùëÇùëÖ    ùê∏ùëâùê∏ùëÖùëå ùëÉùê∏ùëÖùëÜùëÇùëÅ ùëäùêªùëÇ ùê¥ùê∑ùê∑ùëÜ 100 ùëÉùê∏ùëÇùëÉùêøùê∏ ùëáùëÇ ùëÄùëå ùê∫ùëÖùëÇùëàùëÉ'))))
            print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(Box.DoubleCube(  ' ‚û©{31}: GO TO ANOTHER ACCOUNT'))))
            print(Colorate.Horizontal(Colors.rainbow, Center.XCenter(Box.DoubleCube(  ' ‚û©{0}: Exit'))))
            print(Colorate.Horizontal(Colors.rainbow, '                         ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[ ‚òÜSERVICE‚òÜ ]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ'))
            
            service = IntPrompt.ask(f"[bold]                               [?] SELECT A SERVICE[red][1-{choices[-1]} or 0][/red][/bold]", choices=choices, show_choices=False)
            
            
            if service == 0: # Exit
                print(Colorate.Horizontal(Colors.rainbow, f'THANK YOU FOR USING OUR TOOL, PLEASE JOIN OUR TELEGRAM CHANNEL: @{__CHANNEL_USERNAME__}'))



            elif service == 1: # Unlock All Paid Cars
                console.print("[red][!] NOTE[/red]: THIS FUNCTION TAKES A WHILE TO COMPLETE, PLEASE DON'T CANCEL", end=None)
                console.print("[red][%] UNLOCKING ALL PAID CARS[/red]: ", end=None)
                if cpm.unlock_paid_cars():
                    print(Colorate.Horizontal(Colors.rainbow, 'SUCCESSFUL'))
                    answ = Prompt.ask("[red][?] DO YOU WANT TO EXIT[/red] ?", choices=["y", "n"], default="n")
                    if answ == "y": print(Colorate.Horizontal(Colors.rainbow, f'THANK YOU FOR USING OUR TOOL, PLEASE JOIN OUR TELEGRAM CHANNEL: @{__CHANNEL_USERNAME__}'))
                    else: continue
                else:
                    print(Colorate.Horizontal(Colors.rainbow, 'FAILED'))
                    print(Colorate.Horizontal(Colors.rainbow, 'PLEASE TRY AGAIN'))
                    sleep(2)
                    continue
            elif service == 2: # Increase Money
                print(Colorate.Horizontal(Colors.rainbow, '[?] INSERT HOW MUCH MONEY DO YOU WANT'))
                amount = IntPrompt.ask("[red][?] AMOUNT[/red]")
                console.print("[red][%] SAVING YOUR DATA[/red]: ", end=None)
                if amount > 0 and amount <= 999999999999999999999999999999:
                    if cpm.set_player_money(amount):
                        print(Colorate.Horizontal(Colors.rainbow, 'SUCCESSFUL'))
                        answ = Prompt.ask("[red][?] DO YOU WANT TO EXIT[/red] ?", choices=["y", "n"], default="n")
                        if answ == "y": print(Colorate.Horizontal(Colors.rainbow, f'THANK YOU FOR USING OUR TOOL, PLEASE JOIN OUR TELEGRAM CHANNEL: @{__CHANNEL_USERNAME__}'))
                        else: continue
                    else:
                        print(Colorate.Horizontal(Colors.rainbow, 'FAILED'))
                        print(Colorate.Horizontal(Colors.rainbow, 'PLEASE TRY AGAIN'))
                        sleep(2)
                        continue
                else:
                    print(Colorate.Horizontal(Colors.rainbow, 'FAILED'))
                    print(Colorate.Horizontal(Colors.rainbow, 'PLEASE USE VALID VALUES'))
                    sleep(2)



                    continue
            elif service == 3: # Unlock All coins Cars
                console.print("[red][!] NOTE[/red]: THIS FUNCTION TAKES A WHILE TO COMPLETE, PLEASE DON'T CANCEL", end=None)
                console.print("[red][%] UNLOCKING ALL COIN CARS[/red]: ", end=None)
                if cpm.unlock_coins_cars():
                    print(Colorate.Horizontal(Colors.rainbow, 'SUCCESSFUL'))
                    answ = Prompt.ask("[red][?] DO YOU WANT TO EXIT[/red] ?", choices=["y", "n"], default="n")
                    if answ == "y": print(Colorate.Horizontal(Colors.rainbow, f'THANK YOU FOR USING OUR TOOL, PLEASE JOIN OUR TELEGRAM CHANNEL: @{__CHANNEL_USERNAME__}'))
                    else: continue
                else:
                    print(Colorate.Horizontal(Colors.rainbow, 'FAILED'))
                    print(Colorate.Horizontal(Colors.rainbow, 'PLEASE TRY AGAIN'))
                    sleep(2)
                    continue                    
            elif service == 4: # Increase Coins
                print(Colorate.Horizontal(Colors.rainbow, '[?] INSERT HOW MUCH COINS DO YOU WANT'))
                amount = IntPrompt.ask("[red][?] AMOUNT[/red]")
                console.print("[red][%] SAVING YOUR DATA[/red]: ", end=None)
                if amount > 0 and amount <= 999999999999999999999999999999:
                    if cpm.set_player_coins(amount):
                        print(Colorate.Horizontal(Colors.rainbow, 'SUCCESSFUL'))
                        answ = Prompt.ask("[red][?] DO YOU WANT TO EXIT[/red] ?", choices=["y", "n"], default="n")
                        if answ == "y": print(Colorate.Horizontal(Colors.rainbow, f'THANK YOU FOR USING OUR TOOL, PLEASE JOIN OUR TELEGRAM CHANNEL: @{__CHANNEL_USERNAME__}'))
                        else: continue
                    else:
                        print(Colorate.Horizontal(Colors.rainbow, 'FAILED'))
                        print(Colorate.Horizontal(Colors.rainbow, 'PLEASE TRY AGAIN'))
                        sleep(2)
                        continue
                else:
                    print(Colorate.Horizontal(Colors.rainbow, 'FAILED'))
                    print(Colorate.Horizontal(Colors.rainbow, 'PLEASE USE VALID VALUES'))
                    sleep(2)



                    continue



            elif service == 5: # Unlock All Cars
                console.print("[red][%] UNLOCKING ALL CARS[/red]: ", end=None)
                if cpm.unlock_all_cars():
                    print(Colorate.Horizontal(Colors.rainbow, 'SUCCESSFUL'))
                    answ = Prompt.ask("[red][?] DO YOU WANT TO EXIT[/red] ?", choices=["y", "n"], default="n")
                    if answ == "y": print(Colorate.Horizontal(Colors.rainbow, f'THANK YOU FOR USING OUR TOOL, PLEASE JOIN OUR TELEGRAM CHANNEL: @{__CHANNEL_USERNAME__}'))
                    else: continue
                else:
                    print(Colorate.Horizo
